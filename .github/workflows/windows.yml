name: Windows Build

on:
  push:
  release:
    types: [prereleased]
env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  name: vcpkg-manifest-version-bug
  # Disk C has 90GB free size, while disk D only has 11.3GB free disk size
  # Override github envs, for vcpkg action to work properly: https://github.com/lukka/run-vcpkg/blob/36477d05567caebad06ad53713dcbde226135205/dist/index.js#L4891
  GITHUB_WORKSPACE: C:/vcpkg-manifest-version-bug
  BUILD_SOURCESDIRECTORY: C:/vcpkg-manifest-version-bug
  srcDir: C:/vcpkg-manifest-version-bug
  buildDir: C:/vcpkg-manifest-version-bug/build

jobs:
  check_commit_msg:
    outputs:
      commit_message: ${{ steps.get_message.outputs.message }}
    name: Check if the workflow has been disabled.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get commit message
        id: get_message
        run: |
          echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
          echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
  build:
    needs: check_commit_msg
    if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_WIN') }}
    strategy:
      matrix:
        qt_version: [5.15.0]
        platform: [windows-latest]
        arch: [
            # x86,
            x64,
          ]
        include:
          # x86 is get error (qt cannot be installed)
          # - platform: windows-latest
          #   arch: x86
          #   qtarch: win32_msvc2019
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        shell: powershell
        run: |
          mkdir ${{ env.srcDir }}
          git clone --recurse-submodules https://github.com/upupming/vcpkg-manifest-version-bug.git ${{ env.srcDir }}
          cd ${{ env.srcDir }}
      - name: Install Python 3.7 version
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
          architecture: ${{ matrix.arch }}
      # =========================================================================================================
      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019
          toolset: 14.2
          arch: ${{ matrix.arch }}
      - name: Cache CUDA
        id: cache-cuda
        uses: actions/cache@v1
        with:
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2
          key: CUDACache-v11.2
      # https://github.com/ptheywood/cuda-cmake-github-actions
      - name: Install CUDA
        env:
          cuda: 11.2.152
        shell: powershell
        run: |
          # Install CUDA via a powershell script
          ${{ env.srcDir }}/.scripts/actions/install_cuda_windows.ps1 ${{ steps.cache-cuda.outputs.cache-hit }}
          if ($?) {
            # Set paths for subsequent steps, using $env:CUDA_PATH
            echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
            echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

      # Restore from cache the previously built ports. If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      - name: Restore from cache and install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@v6
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg submodule in the Git repository.
          vcpkgDirectory: '${{ env.srcDir }}/vcpkg'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg_manifest/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.arch }}-windows
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Installing Qt - ${{ matrix.arch }}
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      # =========================================================================================================
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Setup Ninja
        if: matrix.platform == 'windows-latest'
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0
      # ========================================================================================================= Generate MakeFile and Build
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: powershell
        env:
          CC: cl.exe
          CXX: cl.exe
        # https://stackoverflow.com/questions/31262342/cmake-g-ninja-on-windows-specify-x64?rq=1
        run: |
          Get-PsDrive
          cmake -S ${{ env.srcDir }} -B ${{ env.buildDir }} -GNinja -DCMAKE_BUILD_TYPE=Release
          cmake --build ${{ env.buildDir }} --target all --parallel $(nproc)
          cd ${{ env.buildDir }}
          windeployqt.exe --release --qmldir .. ./${{ env.name }}.exe
          Get-PsDrive

      - name: Set outputs
        id: vars
        run: |
          cd ${{ env.srcDir }}
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - uploading artifact (whole zip)
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.name }}-${{ steps.time.outputs.time }}-${{ steps.vars.outputs.sha_short }}-windows-${{ matrix.arch }}-package
          path: |
            build
            !build/.cmake
            !build/CMakeFiles
            !build/cmake_install.cmake
            !build/CMakeCache.txt
            !build/.ninja_deps
            !build/.ninja_log
            !build/build.ninja
            !build/**/*autogen*
            !build/vcpkg_installed
            !build/**/*.log
            !build/compile_commands.json
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - uploading artifact (only the exe)
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.name }}-${{ steps.time.outputs.time }}-${{ steps.vars.outputs.sha_short }}-windows-${{ matrix.arch }}-exe
          path: build/${{ env.name }}.exe
